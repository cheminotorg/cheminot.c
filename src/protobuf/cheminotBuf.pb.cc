// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cheminotBuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cheminotBuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace m {
namespace cheminot {
namespace data {

namespace {

const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;
const ::google::protobuf::Descriptor* Graph_VerticesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Vertice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vertice_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalendarDates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalendarDates_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalendarDates_ExceptionsByServiceIdEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CalendarExceptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalendarExceptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalendarDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalendarDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Calendar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Calendar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cheminotBuf_2eproto() {
  protobuf_AddDesc_cheminotBuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cheminotBuf.proto");
  GOOGLE_CHECK(file != NULL);
  Graph_descriptor_ = file->message_type(0);
  static const int Graph_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, vertices_),
  };
  Graph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Graph_descriptor_,
      Graph::default_instance_,
      Graph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _has_bits_[0]),
      -1,
      -1,
      sizeof(Graph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_));
  Graph_VerticesEntry_descriptor_ = Graph_descriptor_->nested_type(0);
  Vertice_descriptor_ = file->message_type(1);
  static const int Vertice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertice, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertice, stoptimes_),
  };
  Vertice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vertice_descriptor_,
      Vertice::default_instance_,
      Vertice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertice, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vertice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertice, _internal_metadata_));
  StopTime_descriptor_ = file->message_type(2);
  static const int StopTime_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, tripid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, arrival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, departure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, stopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, pos_),
  };
  StopTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopTime_descriptor_,
      StopTime::default_instance_,
      StopTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, _internal_metadata_));
  CalendarDates_descriptor_ = file->message_type(3);
  static const int CalendarDates_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDates, exceptionsbyserviceid_),
  };
  CalendarDates_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalendarDates_descriptor_,
      CalendarDates::default_instance_,
      CalendarDates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDates, _has_bits_[0]),
      -1,
      -1,
      sizeof(CalendarDates),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDates, _internal_metadata_));
  CalendarDates_ExceptionsByServiceIdEntry_descriptor_ = CalendarDates_descriptor_->nested_type(0);
  CalendarExceptions_descriptor_ = file->message_type(4);
  static const int CalendarExceptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarExceptions, calendardates_),
  };
  CalendarExceptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalendarExceptions_descriptor_,
      CalendarExceptions::default_instance_,
      CalendarExceptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarExceptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(CalendarExceptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarExceptions, _internal_metadata_));
  CalendarDate_descriptor_ = file->message_type(5);
  static const int CalendarDate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDate, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDate, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDate, exceptiontype_),
  };
  CalendarDate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalendarDate_descriptor_,
      CalendarDate::default_instance_,
      CalendarDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDate, _has_bits_[0]),
      -1,
      -1,
      sizeof(CalendarDate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarDate, _internal_metadata_));
  Calendar_descriptor_ = file->message_type(6);
  static const int Calendar_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, monday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, tuesday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, wednesday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, thursday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, friday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, saturday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, sunday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, enddate_),
  };
  Calendar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Calendar_descriptor_,
      Calendar::default_instance_,
      Calendar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, _has_bits_[0]),
      -1,
      -1,
      sizeof(Calendar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cheminotBuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Graph_descriptor_, &Graph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Graph_VerticesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::m::cheminot::data::Vertice,
            ::google::protobuf::FieldDescriptor::TYPE_STRING,
            ::google::protobuf::FieldDescriptor::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Graph_VerticesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vertice_descriptor_, &Vertice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopTime_descriptor_, &StopTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalendarDates_descriptor_, &CalendarDates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CalendarDates_ExceptionsByServiceIdEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::m::cheminot::data::CalendarExceptions,
            ::google::protobuf::FieldDescriptor::TYPE_STRING,
            ::google::protobuf::FieldDescriptor::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CalendarDates_ExceptionsByServiceIdEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalendarExceptions_descriptor_, &CalendarExceptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalendarDate_descriptor_, &CalendarDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Calendar_descriptor_, &Calendar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cheminotBuf_2eproto() {
  delete Graph::default_instance_;
  delete Graph_reflection_;
  delete Vertice::default_instance_;
  delete Vertice_reflection_;
  delete StopTime::default_instance_;
  delete StopTime_reflection_;
  delete CalendarDates::default_instance_;
  delete CalendarDates_reflection_;
  delete CalendarExceptions::default_instance_;
  delete CalendarExceptions_reflection_;
  delete CalendarDate::default_instance_;
  delete CalendarDate_reflection_;
  delete Calendar::default_instance_;
  delete Calendar_reflection_;
}

void protobuf_AddDesc_cheminotBuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021cheminotBuf.proto\022\017m.cheminot.data\"\212\001\n"
    "\005Graph\0226\n\010vertices\030\001 \003(\0132$.m.cheminot.da"
    "ta.Graph.VerticesEntry\032I\n\rVerticesEntry\022"
    "\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030.m.cheminot"
    ".data.Vertice:\0028\001\"`\n\007Vertice\022\n\n\002id\030\001 \002(\t"
    "\022\014\n\004name\030\002 \002(\t\022\r\n\005edges\030\003 \003(\t\022,\n\tstopTim"
    "es\030\004 \003(\0132\031.m.cheminot.data.StopTime\"[\n\010S"
    "topTime\022\016\n\006tripId\030\001 \002(\t\022\017\n\007arrival\030\002 \002(\t"
    "\022\021\n\tdeparture\030\003 \002(\t\022\016\n\006stopId\030\004 \002(\t\022\013\n\003p"
    "os\030\005 \002(\005\"\314\001\n\rCalendarDates\022X\n\025exceptions"
    "ByServiceId\030\001 \003(\01329.m.cheminot.data.Cale"
    "ndarDates.ExceptionsByServiceIdEntry\032a\n\032"
    "ExceptionsByServiceIdEntry\022\013\n\003key\030\001 \001(\t\022"
    "2\n\005value\030\002 \001(\0132#.m.cheminot.data.Calenda"
    "rExceptions:\0028\001\"J\n\022CalendarExceptions\0224\n"
    "\rcalendarDates\030\001 \003(\0132\035.m.cheminot.data.C"
    "alendarDate\"F\n\014CalendarDate\022\021\n\tserviceId"
    "\030\001 \002(\t\022\014\n\004date\030\002 \002(\t\022\025\n\rexceptionType\030\003 "
    "\002(\005\"\271\001\n\010Calendar\022\021\n\tserviceId\030\001 \002(\t\022\016\n\006m"
    "onday\030\002 \002(\t\022\017\n\007tuesday\030\003 \002(\t\022\021\n\twednesda"
    "y\030\004 \002(\t\022\020\n\010thursday\030\005 \002(\t\022\016\n\006friday\030\006 \002("
    "\t\022\020\n\010saturday\030\007 \002(\t\022\016\n\006sunday\030\010 \002(\t\022\021\n\ts"
    "tartDate\030\t \002(\t\022\017\n\007endDate\030\n \002(\t", 911);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cheminotBuf.proto", &protobuf_RegisterTypes);
  Graph::default_instance_ = new Graph();
  Vertice::default_instance_ = new Vertice();
  StopTime::default_instance_ = new StopTime();
  CalendarDates::default_instance_ = new CalendarDates();
  CalendarExceptions::default_instance_ = new CalendarExceptions();
  CalendarDate::default_instance_ = new CalendarDate();
  Calendar::default_instance_ = new Calendar();
  Graph::default_instance_->InitAsDefaultInstance();
  Vertice::default_instance_->InitAsDefaultInstance();
  StopTime::default_instance_->InitAsDefaultInstance();
  CalendarDates::default_instance_->InitAsDefaultInstance();
  CalendarExceptions::default_instance_->InitAsDefaultInstance();
  CalendarDate::default_instance_->InitAsDefaultInstance();
  Calendar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cheminotBuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cheminotBuf_2eproto {
  StaticDescriptorInitializer_cheminotBuf_2eproto() {
    protobuf_AddDesc_cheminotBuf_2eproto();
  }
} static_descriptor_initializer_cheminotBuf_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Graph::kVerticesFieldNumber;
#endif  // !_MSC_VER

Graph::Graph()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:m.cheminot.data.Graph)
}

void Graph::InitAsDefaultInstance() {
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:m.cheminot.data.Graph)
}

void Graph::SharedCtor() {
  _cached_size_ = 0;
  vertices_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  vertices_.SetEntryDescriptor(
      &::m::cheminot::data::Graph_VerticesEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:m.cheminot.data.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cheminotBuf_2eproto();
  return *default_instance_;
}

Graph* Graph::default_instance_ = NULL;

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
  vertices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:m.cheminot.data.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .m.cheminot.data.Vertice> vertices = 1;
      case 1: {
        if (tag == 10) {
         parse_vertices:
          ::google::protobuf::scoped_ptr<Graph_VerticesEntry> entry(vertices_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_vertices())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vertices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:m.cheminot.data.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:m.cheminot.data.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:m.cheminot.data.Graph)
  // map<string, .m.cheminot.data.Vertice> vertices = 1;
  {
    ::google::protobuf::scoped_ptr<Graph_VerticesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::m::cheminot::data::Vertice >::const_iterator
        it = vertices().begin(); it != vertices().end(); ++it) {
      entry.reset(vertices_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:m.cheminot.data.Graph)
}

::google::protobuf::uint8* Graph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:m.cheminot.data.Graph)
  // map<string, .m.cheminot.data.Vertice> vertices = 1;
  {
    ::google::protobuf::scoped_ptr<Graph_VerticesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::m::cheminot::data::Vertice >::const_iterator
        it = vertices().begin(); it != vertices().end(); ++it) {
      entry.reset(vertices_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:m.cheminot.data.Graph)
  return target;
}

int Graph::ByteSize() const {
  int total_size = 0;

  // map<string, .m.cheminot.data.Vertice> vertices = 1;
  total_size += 1 * this->vertices_size();
  {
    ::google::protobuf::scoped_ptr<Graph_VerticesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::m::cheminot::data::Vertice >::const_iterator
        it = vertices().begin(); it != vertices().end(); ++it) {
      entry.reset(vertices_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Graph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Graph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vertices_.MergeFrom(from.vertices_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->vertices())) return false;
  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  vertices_.Swap(&other->vertices_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vertice::kIdFieldNumber;
const int Vertice::kNameFieldNumber;
const int Vertice::kEdgesFieldNumber;
const int Vertice::kStopTimesFieldNumber;
#endif  // !_MSC_VER

Vertice::Vertice()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:m.cheminot.data.Vertice)
}

void Vertice::InitAsDefaultInstance() {
}

Vertice::Vertice(const Vertice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:m.cheminot.data.Vertice)
}

void Vertice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vertice::~Vertice() {
  // @@protoc_insertion_point(destructor:m.cheminot.data.Vertice)
  SharedDtor();
}

void Vertice::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Vertice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vertice_descriptor_;
}

const Vertice& Vertice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cheminotBuf_2eproto();
  return *default_instance_;
}

Vertice* Vertice::default_instance_ = NULL;

Vertice* Vertice::New(::google::protobuf::Arena* arena) const {
  Vertice* n = new Vertice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vertice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  edges_.Clear();
  stoptimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vertice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:m.cheminot.data.Vertice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Vertice.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Vertice.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_edges;
        break;
      }

      // repeated string edges = 3;
      case 3: {
        if (tag == 26) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_edges()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->edges(this->edges_size() - 1).data(),
            this->edges(this->edges_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Vertice.edges");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_edges;
        if (input->ExpectTag(34)) goto parse_stopTimes;
        break;
      }

      // repeated .m.cheminot.data.StopTime stopTimes = 4;
      case 4: {
        if (tag == 34) {
         parse_stopTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stoptimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stopTimes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:m.cheminot.data.Vertice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:m.cheminot.data.Vertice)
  return false;
#undef DO_
}

void Vertice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:m.cheminot.data.Vertice)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Vertice.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Vertice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string edges = 3;
  for (int i = 0; i < this->edges_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->edges(i).data(), this->edges(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "m.cheminot.data.Vertice.edges");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->edges(i), output);
  }

  // repeated .m.cheminot.data.StopTime stopTimes = 4;
  for (unsigned int i = 0, n = this->stoptimes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stoptimes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:m.cheminot.data.Vertice)
}

::google::protobuf::uint8* Vertice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:m.cheminot.data.Vertice)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Vertice.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Vertice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string edges = 3;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->edges(i).data(), this->edges(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Vertice.edges");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->edges(i), target);
  }

  // repeated .m.cheminot.data.StopTime stopTimes = 4;
  for (unsigned int i = 0, n = this->stoptimes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stoptimes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:m.cheminot.data.Vertice)
  return target;
}

int Vertice::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int Vertice::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string edges = 3;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->edges(i));
  }

  // repeated .m.cheminot.data.StopTime stopTimes = 4;
  total_size += 1 * this->stoptimes_size();
  for (int i = 0; i < this->stoptimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stoptimes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertice::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vertice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vertice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vertice::MergeFrom(const Vertice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  edges_.MergeFrom(from.edges_);
  stoptimes_.MergeFrom(from.stoptimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vertice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertice::CopyFrom(const Vertice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->stoptimes())) return false;
  return true;
}

void Vertice::Swap(Vertice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vertice::InternalSwap(Vertice* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  edges_.UnsafeArenaSwap(&other->edges_);
  stoptimes_.UnsafeArenaSwap(&other->stoptimes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vertice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vertice_descriptor_;
  metadata.reflection = Vertice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopTime::kTripIdFieldNumber;
const int StopTime::kArrivalFieldNumber;
const int StopTime::kDepartureFieldNumber;
const int StopTime::kStopIdFieldNumber;
const int StopTime::kPosFieldNumber;
#endif  // !_MSC_VER

StopTime::StopTime()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:m.cheminot.data.StopTime)
}

void StopTime::InitAsDefaultInstance() {
}

StopTime::StopTime(const StopTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:m.cheminot.data.StopTime)
}

void StopTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tripid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arrival_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  departure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopTime::~StopTime() {
  // @@protoc_insertion_point(destructor:m.cheminot.data.StopTime)
  SharedDtor();
}

void StopTime::SharedDtor() {
  tripid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arrival_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  departure_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopTime_descriptor_;
}

const StopTime& StopTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cheminotBuf_2eproto();
  return *default_instance_;
}

StopTime* StopTime::default_instance_ = NULL;

StopTime* StopTime::New(::google::protobuf::Arena* arena) const {
  StopTime* n = new StopTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopTime::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_tripid()) {
      tripid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arrival()) {
      arrival_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_departure()) {
      departure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stopid()) {
      stopid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:m.cheminot.data.StopTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tripId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tripid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tripid().data(), this->tripid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.StopTime.tripId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arrival;
        break;
      }

      // required string arrival = 2;
      case 2: {
        if (tag == 18) {
         parse_arrival:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrival()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arrival().data(), this->arrival().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.StopTime.arrival");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_departure;
        break;
      }

      // required string departure = 3;
      case 3: {
        if (tag == 26) {
         parse_departure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->departure().data(), this->departure().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.StopTime.departure");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stopId;
        break;
      }

      // required string stopId = 4;
      case 4: {
        if (tag == 34) {
         parse_stopId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stopid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stopid().data(), this->stopid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.StopTime.stopId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // required int32 pos = 5;
      case 5: {
        if (tag == 40) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:m.cheminot.data.StopTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:m.cheminot.data.StopTime)
  return false;
#undef DO_
}

void StopTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:m.cheminot.data.StopTime)
  // required string tripId = 1;
  if (has_tripid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tripid().data(), this->tripid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.tripId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tripid(), output);
  }

  // required string arrival = 2;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrival().data(), this->arrival().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.arrival");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->arrival(), output);
  }

  // required string departure = 3;
  if (has_departure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departure().data(), this->departure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.departure");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->departure(), output);
  }

  // required string stopId = 4;
  if (has_stopid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stopid().data(), this->stopid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.stopId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stopid(), output);
  }

  // required int32 pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:m.cheminot.data.StopTime)
}

::google::protobuf::uint8* StopTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:m.cheminot.data.StopTime)
  // required string tripId = 1;
  if (has_tripid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tripid().data(), this->tripid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.tripId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tripid(), target);
  }

  // required string arrival = 2;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrival().data(), this->arrival().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.arrival");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->arrival(), target);
  }

  // required string departure = 3;
  if (has_departure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departure().data(), this->departure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.departure");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->departure(), target);
  }

  // required string stopId = 4;
  if (has_stopid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stopid().data(), this->stopid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.StopTime.stopId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stopid(), target);
  }

  // required int32 pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:m.cheminot.data.StopTime)
  return target;
}

int StopTime::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_tripid()) {
    // required string tripId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tripid());
  }

  if (has_arrival()) {
    // required string arrival = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arrival());
  }

  if (has_departure()) {
    // required string departure = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->departure());
  }

  if (has_stopid()) {
    // required string stopId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stopid());
  }

  if (has_pos()) {
    // required int32 pos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  return total_size;
}
int StopTime::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string tripId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tripid());

    // required string arrival = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arrival());

    // required string departure = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->departure());

    // required string stopId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stopid());

    // required int32 pos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopTime::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StopTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopTime::MergeFrom(const StopTime& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tripid()) {
      set_has_tripid();
      tripid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tripid_);
    }
    if (from.has_arrival()) {
      set_has_arrival();
      arrival_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arrival_);
    }
    if (from.has_departure()) {
      set_has_departure();
      departure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.departure_);
    }
    if (from.has_stopid()) {
      set_has_stopid();
      stopid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stopid_);
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopTime::CopyFrom(const StopTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void StopTime::Swap(StopTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopTime::InternalSwap(StopTime* other) {
  tripid_.Swap(&other->tripid_);
  arrival_.Swap(&other->arrival_);
  departure_.Swap(&other->departure_);
  stopid_.Swap(&other->stopid_);
  std::swap(pos_, other->pos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopTime_descriptor_;
  metadata.reflection = StopTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalendarDates::kExceptionsByServiceIdFieldNumber;
#endif  // !_MSC_VER

CalendarDates::CalendarDates()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:m.cheminot.data.CalendarDates)
}

void CalendarDates::InitAsDefaultInstance() {
}

CalendarDates::CalendarDates(const CalendarDates& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:m.cheminot.data.CalendarDates)
}

void CalendarDates::SharedCtor() {
  _cached_size_ = 0;
  exceptionsbyserviceid_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  exceptionsbyserviceid_.SetEntryDescriptor(
      &::m::cheminot::data::CalendarDates_ExceptionsByServiceIdEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarDates::~CalendarDates() {
  // @@protoc_insertion_point(destructor:m.cheminot.data.CalendarDates)
  SharedDtor();
}

void CalendarDates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalendarDates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalendarDates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalendarDates_descriptor_;
}

const CalendarDates& CalendarDates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cheminotBuf_2eproto();
  return *default_instance_;
}

CalendarDates* CalendarDates::default_instance_ = NULL;

CalendarDates* CalendarDates::New(::google::protobuf::Arena* arena) const {
  CalendarDates* n = new CalendarDates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalendarDates::Clear() {
  exceptionsbyserviceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CalendarDates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:m.cheminot.data.CalendarDates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .m.cheminot.data.CalendarExceptions> exceptionsByServiceId = 1;
      case 1: {
        if (tag == 10) {
         parse_exceptionsByServiceId:
          ::google::protobuf::scoped_ptr<CalendarDates_ExceptionsByServiceIdEntry> entry(exceptionsbyserviceid_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_exceptionsbyserviceid())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_exceptionsByServiceId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:m.cheminot.data.CalendarDates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:m.cheminot.data.CalendarDates)
  return false;
#undef DO_
}

void CalendarDates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:m.cheminot.data.CalendarDates)
  // map<string, .m.cheminot.data.CalendarExceptions> exceptionsByServiceId = 1;
  {
    ::google::protobuf::scoped_ptr<CalendarDates_ExceptionsByServiceIdEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::m::cheminot::data::CalendarExceptions >::const_iterator
        it = exceptionsbyserviceid().begin(); it != exceptionsbyserviceid().end(); ++it) {
      entry.reset(exceptionsbyserviceid_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:m.cheminot.data.CalendarDates)
}

::google::protobuf::uint8* CalendarDates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:m.cheminot.data.CalendarDates)
  // map<string, .m.cheminot.data.CalendarExceptions> exceptionsByServiceId = 1;
  {
    ::google::protobuf::scoped_ptr<CalendarDates_ExceptionsByServiceIdEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::m::cheminot::data::CalendarExceptions >::const_iterator
        it = exceptionsbyserviceid().begin(); it != exceptionsbyserviceid().end(); ++it) {
      entry.reset(exceptionsbyserviceid_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:m.cheminot.data.CalendarDates)
  return target;
}

int CalendarDates::ByteSize() const {
  int total_size = 0;

  // map<string, .m.cheminot.data.CalendarExceptions> exceptionsByServiceId = 1;
  total_size += 1 * this->exceptionsbyserviceid_size();
  {
    ::google::protobuf::scoped_ptr<CalendarDates_ExceptionsByServiceIdEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::m::cheminot::data::CalendarExceptions >::const_iterator
        it = exceptionsbyserviceid().begin(); it != exceptionsbyserviceid().end(); ++it) {
      entry.reset(exceptionsbyserviceid_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarDates::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CalendarDates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalendarDates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalendarDates::MergeFrom(const CalendarDates& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  exceptionsbyserviceid_.MergeFrom(from.exceptionsbyserviceid_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CalendarDates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarDates::CopyFrom(const CalendarDates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarDates::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->exceptionsbyserviceid())) return false;
  return true;
}

void CalendarDates::Swap(CalendarDates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarDates::InternalSwap(CalendarDates* other) {
  exceptionsbyserviceid_.Swap(&other->exceptionsbyserviceid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalendarDates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalendarDates_descriptor_;
  metadata.reflection = CalendarDates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalendarExceptions::kCalendarDatesFieldNumber;
#endif  // !_MSC_VER

CalendarExceptions::CalendarExceptions()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:m.cheminot.data.CalendarExceptions)
}

void CalendarExceptions::InitAsDefaultInstance() {
}

CalendarExceptions::CalendarExceptions(const CalendarExceptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:m.cheminot.data.CalendarExceptions)
}

void CalendarExceptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarExceptions::~CalendarExceptions() {
  // @@protoc_insertion_point(destructor:m.cheminot.data.CalendarExceptions)
  SharedDtor();
}

void CalendarExceptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalendarExceptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalendarExceptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalendarExceptions_descriptor_;
}

const CalendarExceptions& CalendarExceptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cheminotBuf_2eproto();
  return *default_instance_;
}

CalendarExceptions* CalendarExceptions::default_instance_ = NULL;

CalendarExceptions* CalendarExceptions::New(::google::protobuf::Arena* arena) const {
  CalendarExceptions* n = new CalendarExceptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalendarExceptions::Clear() {
  calendardates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CalendarExceptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:m.cheminot.data.CalendarExceptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .m.cheminot.data.CalendarDate calendarDates = 1;
      case 1: {
        if (tag == 10) {
         parse_calendarDates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calendardates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_calendarDates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:m.cheminot.data.CalendarExceptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:m.cheminot.data.CalendarExceptions)
  return false;
#undef DO_
}

void CalendarExceptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:m.cheminot.data.CalendarExceptions)
  // repeated .m.cheminot.data.CalendarDate calendarDates = 1;
  for (unsigned int i = 0, n = this->calendardates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->calendardates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:m.cheminot.data.CalendarExceptions)
}

::google::protobuf::uint8* CalendarExceptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:m.cheminot.data.CalendarExceptions)
  // repeated .m.cheminot.data.CalendarDate calendarDates = 1;
  for (unsigned int i = 0, n = this->calendardates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->calendardates(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:m.cheminot.data.CalendarExceptions)
  return target;
}

int CalendarExceptions::ByteSize() const {
  int total_size = 0;

  // repeated .m.cheminot.data.CalendarDate calendarDates = 1;
  total_size += 1 * this->calendardates_size();
  for (int i = 0; i < this->calendardates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calendardates(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarExceptions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CalendarExceptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalendarExceptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalendarExceptions::MergeFrom(const CalendarExceptions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  calendardates_.MergeFrom(from.calendardates_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CalendarExceptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarExceptions::CopyFrom(const CalendarExceptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarExceptions::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->calendardates())) return false;
  return true;
}

void CalendarExceptions::Swap(CalendarExceptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarExceptions::InternalSwap(CalendarExceptions* other) {
  calendardates_.UnsafeArenaSwap(&other->calendardates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalendarExceptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalendarExceptions_descriptor_;
  metadata.reflection = CalendarExceptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalendarDate::kServiceIdFieldNumber;
const int CalendarDate::kDateFieldNumber;
const int CalendarDate::kExceptionTypeFieldNumber;
#endif  // !_MSC_VER

CalendarDate::CalendarDate()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:m.cheminot.data.CalendarDate)
}

void CalendarDate::InitAsDefaultInstance() {
}

CalendarDate::CalendarDate(const CalendarDate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:m.cheminot.data.CalendarDate)
}

void CalendarDate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exceptiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarDate::~CalendarDate() {
  // @@protoc_insertion_point(destructor:m.cheminot.data.CalendarDate)
  SharedDtor();
}

void CalendarDate::SharedDtor() {
  serviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CalendarDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalendarDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalendarDate_descriptor_;
}

const CalendarDate& CalendarDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cheminotBuf_2eproto();
  return *default_instance_;
}

CalendarDate* CalendarDate::default_instance_ = NULL;

CalendarDate* CalendarDate::New(::google::protobuf::Arena* arena) const {
  CalendarDate* n = new CalendarDate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalendarDate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_serviceid()) {
      serviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    exceptiontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CalendarDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:m.cheminot.data.CalendarDate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serviceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.CalendarDate.serviceId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // required string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.CalendarDate.date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exceptionType;
        break;
      }

      // required int32 exceptionType = 3;
      case 3: {
        if (tag == 24) {
         parse_exceptionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exceptiontype_)));
          set_has_exceptiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:m.cheminot.data.CalendarDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:m.cheminot.data.CalendarDate)
  return false;
#undef DO_
}

void CalendarDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:m.cheminot.data.CalendarDate)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.CalendarDate.serviceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serviceid(), output);
  }

  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.CalendarDate.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // required int32 exceptionType = 3;
  if (has_exceptiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exceptiontype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:m.cheminot.data.CalendarDate)
}

::google::protobuf::uint8* CalendarDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:m.cheminot.data.CalendarDate)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.CalendarDate.serviceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serviceid(), target);
  }

  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.CalendarDate.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // required int32 exceptionType = 3;
  if (has_exceptiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exceptiontype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:m.cheminot.data.CalendarDate)
  return target;
}

int CalendarDate::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_serviceid()) {
    // required string serviceId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceid());
  }

  if (has_date()) {
    // required string date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  if (has_exceptiontype()) {
    // required int32 exceptionType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exceptiontype());
  }

  return total_size;
}
int CalendarDate::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string serviceId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceid());

    // required string date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());

    // required int32 exceptionType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exceptiontype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarDate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CalendarDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalendarDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalendarDate::MergeFrom(const CalendarDate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serviceid()) {
      set_has_serviceid();
      serviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceid_);
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_exceptiontype()) {
      set_exceptiontype(from.exceptiontype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CalendarDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarDate::CopyFrom(const CalendarDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarDate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CalendarDate::Swap(CalendarDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarDate::InternalSwap(CalendarDate* other) {
  serviceid_.Swap(&other->serviceid_);
  date_.Swap(&other->date_);
  std::swap(exceptiontype_, other->exceptiontype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalendarDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalendarDate_descriptor_;
  metadata.reflection = CalendarDate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Calendar::kServiceIdFieldNumber;
const int Calendar::kMondayFieldNumber;
const int Calendar::kTuesdayFieldNumber;
const int Calendar::kWednesdayFieldNumber;
const int Calendar::kThursdayFieldNumber;
const int Calendar::kFridayFieldNumber;
const int Calendar::kSaturdayFieldNumber;
const int Calendar::kSundayFieldNumber;
const int Calendar::kStartDateFieldNumber;
const int Calendar::kEndDateFieldNumber;
#endif  // !_MSC_VER

Calendar::Calendar()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:m.cheminot.data.Calendar)
}

void Calendar::InitAsDefaultInstance() {
}

Calendar::Calendar(const Calendar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:m.cheminot.data.Calendar)
}

void Calendar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tuesday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wednesday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thursday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saturday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sunday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Calendar::~Calendar() {
  // @@protoc_insertion_point(destructor:m.cheminot.data.Calendar)
  SharedDtor();
}

void Calendar::SharedDtor() {
  serviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tuesday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wednesday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thursday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saturday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sunday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Calendar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Calendar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Calendar_descriptor_;
}

const Calendar& Calendar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cheminotBuf_2eproto();
  return *default_instance_;
}

Calendar* Calendar::default_instance_ = NULL;

Calendar* Calendar::New(::google::protobuf::Arena* arena) const {
  Calendar* n = new Calendar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Calendar::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_serviceid()) {
      serviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_monday()) {
      monday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tuesday()) {
      tuesday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_wednesday()) {
      wednesday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_thursday()) {
      thursday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_friday()) {
      friday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_saturday()) {
      saturday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sunday()) {
      sunday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_startdate()) {
      startdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_enddate()) {
      enddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Calendar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:m.cheminot.data.Calendar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serviceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.serviceId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_monday;
        break;
      }

      // required string monday = 2;
      case 2: {
        if (tag == 18) {
         parse_monday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monday().data(), this->monday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.monday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tuesday;
        break;
      }

      // required string tuesday = 3;
      case 3: {
        if (tag == 26) {
         parse_tuesday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tuesday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tuesday().data(), this->tuesday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.tuesday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wednesday;
        break;
      }

      // required string wednesday = 4;
      case 4: {
        if (tag == 34) {
         parse_wednesday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wednesday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wednesday().data(), this->wednesday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.wednesday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_thursday;
        break;
      }

      // required string thursday = 5;
      case 5: {
        if (tag == 42) {
         parse_thursday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thursday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thursday().data(), this->thursday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.thursday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_friday;
        break;
      }

      // required string friday = 6;
      case 6: {
        if (tag == 50) {
         parse_friday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friday().data(), this->friday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.friday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_saturday;
        break;
      }

      // required string saturday = 7;
      case 7: {
        if (tag == 58) {
         parse_saturday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_saturday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->saturday().data(), this->saturday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.saturday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sunday;
        break;
      }

      // required string sunday = 8;
      case 8: {
        if (tag == 66) {
         parse_sunday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sunday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sunday().data(), this->sunday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.sunday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_startDate;
        break;
      }

      // required string startDate = 9;
      case 9: {
        if (tag == 74) {
         parse_startDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.startDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_endDate;
        break;
      }

      // required string endDate = 10;
      case 10: {
        if (tag == 82) {
         parse_endDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enddate().data(), this->enddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m.cheminot.data.Calendar.endDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:m.cheminot.data.Calendar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:m.cheminot.data.Calendar)
  return false;
#undef DO_
}

void Calendar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:m.cheminot.data.Calendar)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.serviceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serviceid(), output);
  }

  // required string monday = 2;
  if (has_monday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monday().data(), this->monday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.monday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->monday(), output);
  }

  // required string tuesday = 3;
  if (has_tuesday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tuesday().data(), this->tuesday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.tuesday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tuesday(), output);
  }

  // required string wednesday = 4;
  if (has_wednesday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wednesday().data(), this->wednesday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.wednesday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->wednesday(), output);
  }

  // required string thursday = 5;
  if (has_thursday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thursday().data(), this->thursday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.thursday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->thursday(), output);
  }

  // required string friday = 6;
  if (has_friday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friday().data(), this->friday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.friday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->friday(), output);
  }

  // required string saturday = 7;
  if (has_saturday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->saturday().data(), this->saturday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.saturday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->saturday(), output);
  }

  // required string sunday = 8;
  if (has_sunday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sunday().data(), this->sunday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.sunday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sunday(), output);
  }

  // required string startDate = 9;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.startDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->startdate(), output);
  }

  // required string endDate = 10;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.endDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->enddate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:m.cheminot.data.Calendar)
}

::google::protobuf::uint8* Calendar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:m.cheminot.data.Calendar)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.serviceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serviceid(), target);
  }

  // required string monday = 2;
  if (has_monday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monday().data(), this->monday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.monday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->monday(), target);
  }

  // required string tuesday = 3;
  if (has_tuesday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tuesday().data(), this->tuesday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.tuesday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tuesday(), target);
  }

  // required string wednesday = 4;
  if (has_wednesday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wednesday().data(), this->wednesday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.wednesday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wednesday(), target);
  }

  // required string thursday = 5;
  if (has_thursday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thursday().data(), this->thursday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.thursday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->thursday(), target);
  }

  // required string friday = 6;
  if (has_friday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friday().data(), this->friday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.friday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->friday(), target);
  }

  // required string saturday = 7;
  if (has_saturday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->saturday().data(), this->saturday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.saturday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->saturday(), target);
  }

  // required string sunday = 8;
  if (has_sunday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sunday().data(), this->sunday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.sunday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sunday(), target);
  }

  // required string startDate = 9;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.startDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->startdate(), target);
  }

  // required string endDate = 10;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m.cheminot.data.Calendar.endDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->enddate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:m.cheminot.data.Calendar)
  return target;
}

int Calendar::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_serviceid()) {
    // required string serviceId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceid());
  }

  if (has_monday()) {
    // required string monday = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monday());
  }

  if (has_tuesday()) {
    // required string tuesday = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tuesday());
  }

  if (has_wednesday()) {
    // required string wednesday = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wednesday());
  }

  if (has_thursday()) {
    // required string thursday = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thursday());
  }

  if (has_friday()) {
    // required string friday = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friday());
  }

  if (has_saturday()) {
    // required string saturday = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->saturday());
  }

  if (has_sunday()) {
    // required string sunday = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sunday());
  }

  if (has_startdate()) {
    // required string startDate = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->startdate());
  }

  if (has_enddate()) {
    // required string endDate = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enddate());
  }

  return total_size;
}
int Calendar::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string serviceId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceid());

    // required string monday = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monday());

    // required string tuesday = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tuesday());

    // required string wednesday = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wednesday());

    // required string thursday = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thursday());

    // required string friday = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friday());

    // required string saturday = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->saturday());

    // required string sunday = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sunday());

    // required string startDate = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->startdate());

    // required string endDate = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enddate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Calendar::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Calendar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Calendar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Calendar::MergeFrom(const Calendar& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serviceid()) {
      set_has_serviceid();
      serviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceid_);
    }
    if (from.has_monday()) {
      set_has_monday();
      monday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monday_);
    }
    if (from.has_tuesday()) {
      set_has_tuesday();
      tuesday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tuesday_);
    }
    if (from.has_wednesday()) {
      set_has_wednesday();
      wednesday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wednesday_);
    }
    if (from.has_thursday()) {
      set_has_thursday();
      thursday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thursday_);
    }
    if (from.has_friday()) {
      set_has_friday();
      friday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friday_);
    }
    if (from.has_saturday()) {
      set_has_saturday();
      saturday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.saturday_);
    }
    if (from.has_sunday()) {
      set_has_sunday();
      sunday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sunday_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_startdate()) {
      set_has_startdate();
      startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
    }
    if (from.has_enddate()) {
      set_has_enddate();
      enddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddate_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Calendar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Calendar::CopyFrom(const Calendar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Calendar::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Calendar::Swap(Calendar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Calendar::InternalSwap(Calendar* other) {
  serviceid_.Swap(&other->serviceid_);
  monday_.Swap(&other->monday_);
  tuesday_.Swap(&other->tuesday_);
  wednesday_.Swap(&other->wednesday_);
  thursday_.Swap(&other->thursday_);
  friday_.Swap(&other->friday_);
  saturday_.Swap(&other->saturday_);
  sunday_.Swap(&other->sunday_);
  startdate_.Swap(&other->startdate_);
  enddate_.Swap(&other->enddate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Calendar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Calendar_descriptor_;
  metadata.reflection = Calendar_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace cheminot
}  // namespace m

// @@protoc_insertion_point(global_scope)
